//--------------------------------------
//--- 010 Editor v6.0.1 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

LittleEndian();

const short PROPERTY_ID_BYTE      = 0x62;   // b
const short PROPERTY_ID_SHORT     = 0x68;   // h
const short PROPERTY_ID_INTEGER32 = 0x69;   // i
const short PROPERTY_ID_INTEGER64 = 0x6C;   // l
const short PROPERTY_ID_FLOAT     = 0x66;   // f
const short PROPERTY_ID_DOUBLE    = 0x64;   // d
const short PROPERTY_ID_STRING    = 0x73;   // s
const short PROPERTY_ID_VEC2      = 0x7632; // 2v
const short PROPERTY_ID_VEC3      = 0X7633; // 3v
const short PROPERTY_ID_VEC4      = 0X7634; // 4v

typedef struct {
    float X;
    float Y;
} Vec2;

typedef struct {
    float X;
    float Y;
    float Z;
} Vec3;

typedef struct {
    float X;
    float Y;
    float Z;
    float W;
} Vec4;

typedef struct {
    SetBackColor(cLtGray);

    uint Magic;
    uint Version;
    uint RootNodes;
    uint Flags;
} CastHeader;

typedef struct {
    SetBackColor(cLtBlue);

    uint   Identifier;
    uint   NodeSize;
    uint64 NodeHash;
    uint   PropertyCount;
    uint   ChildCount;
} CastNodeHeader;

typedef struct {
    SetBackColor(cLtYellow);

    ushort Identifier;
    ushort NameSize;
    uint   ArrayLength;
} CastPropertyHeader;

typedef struct {
    CastPropertyHeader header;
    char               name[header.NameSize] <optimize=false>;

    switch (header.Identifier) {
       case PROPERTY_ID_BYTE:
            SetBackColor(cLtAqua);
            byte values[header.ArrayLength] <optimize=false>; break;

       case PROPERTY_ID_SHORT:
            SetBackColor(cLtPurple);
            ushort values[header.ArrayLength] <optimize=false>; break;

       case PROPERTY_ID_INTEGER32:
            SetBackColor(cLtGreen);
            uint values[header.ArrayLength] <optimize=false>; break;

       case PROPERTY_ID_INTEGER64:
            SetBackColor(cLtRed);
            uint64 values[header.ArrayLength] <optimize=false>; break;

       case PROPERTY_ID_FLOAT:
            SetBackColor(cSilver);
            float values[header.ArrayLength] <optimize=false>; break;

       case PROPERTY_ID_DOUBLE:
            SetBackColor(cPurple);
            double values[header.ArrayLength] <optimize=false>; break;

       case PROPERTY_ID_STRING:
            SetBackColor(cGreen);
            string values; break;

       case PROPERTY_ID_VEC2:
            SetBackColor(cRed);
            Vec2 values[header.ArrayLength] <optimize=false>; break;

       case PROPERTY_ID_VEC3:
            SetBackColor(cAqua);
            Vec3 values[header.ArrayLength] <optimize=false>; break;

       case PROPERTY_ID_VEC4:
            SetBackColor(cBlue);
            Vec4 values[header.ArrayLength] <optimize=false>; break;
    }
} CastProperty ;

struct CastNode;

typedef struct {
    CastNodeHeader header;
    CastProperty   properties[header.PropertyCount] <optimize=false>;
    CastNode       childNodes[header.ChildCount]    <optimize=false>;
} CastNode;

typedef struct {
    CastHeader header;
    CastNode   rootNodes[header.RootNodes] <optimize=false>;
} Cast;

Cast c;